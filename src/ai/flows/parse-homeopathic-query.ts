
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Parses homeopathic inventory queries and extracts key information such as medicine name, potency, and intent.
 *
 * - parseHomeopathicQuery - A function that handles the parsing process.
 * - ParseHomeopathicQueryInput - The input type for the parseHomeopathicQuery function.
 * - ParseHomeopathicQueryOutput - The return type for the parseHomeopathicQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ParseHomeopathicQueryInputSchema = z.object({
  query: z.string().describe('The natural language query about homeopathic medicines.'),
});

export type ParseHomeopathicQueryInput = z.infer<typeof ParseHomeopathicQueryInputSchema>;

const ParseHomeopathicQueryOutputSchema = z.object({
  medicineName: z.string().describe('The name of the homeopathic medicine extracted from the query. This should be ONLY the substance name, without potency or other details (e.g., "Arnica Montana", "Belladonna").'),
  potency: z.string().describe('The potency of the medicine extracted from the query (e.g., "30C", "200X", "1M", "200", "power 200"). If not specified, can be "any potency" or empty.'),
  intent: z
    .string()
    .describe(
      'The likely intent of the user, such as dispensing the medicine, checking the quantity, or finding more information.'
    ),
});

export type ParseHomeopathicQueryOutput = z.infer<typeof ParseHomeopathicQueryOutputSchema>;

export async function parseHomeopathicQuery(
  input: ParseHomeopathicQueryInput
): Promise<ParseHomeopathicQueryOutput> {
  return parseHomeopathicQueryFlow(input);
}

const parseHomeopathicQueryPrompt = ai.definePrompt({
  name: 'parseHomeopathicQueryPrompt',
  input: {schema: ParseHomeopathicQueryInputSchema},
  output: {schema: ParseHomeopathicQueryOutputSchema},
  prompt: `You are an AI assistant specialized in parsing queries related to homeopathic medicines.
Your task is to extract the medicine name, potency, and the user's intent from the given query.

Key instructions for extraction:
- 'medicineName': Extract *only* the name of the homeopathic substance (e.g., "Arnica Montana", "Belladonna"). Do NOT include potency (like "30C", "200X") or other descriptive terms (like "power") in this field.
- 'potency': Extract the strength or power indication (e.g., "30C", "200X", "1M", "200"). If the query mentions terms like "power 200", "potency 30", or "200C", this field should capture that (e.g., "power 200", "30", "200C").
- If the query does not explicitly state a potency, you can set 'potency' to "any potency" or leave it as an empty string.
- 'intent': Describe what the user is trying to achieve (e.g., "dispense", "check quantity", "find information", "lookup details").

Query: {{{query}}}

Respond in JSON format only, with the fields: medicineName, potency, intent.

Example for "Do we have Arnica Montana 30C for bruising?":
{
  "medicineName": "Arnica Montana",
  "potency": "30C",
  "intent": "check quantity/find information for bruising"
}
Example for "Bryonia alba power 200":
{
  "medicineName": "Bryonia alba",
  "potency": "power 200",
  "intent": "find information"
}
Example for "find Nux Vomica":
{
  "medicineName": "Nux Vomica",
  "potency": "any potency",
  "intent": "find information"
}
`,
});

const parseHomeopathicQueryFlow = ai.defineFlow(
  {
    name: 'parseHomeopathicQueryFlow',
    inputSchema: ParseHomeopathicQueryInputSchema,
    outputSchema: ParseHomeopathicQueryOutputSchema,
  },
  async input => {
    const {output} = await parseHomeopathicQueryPrompt(input);
    return output!;
  }
);

